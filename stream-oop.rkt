
#lang racket

(provide make-string-stream)

(define (make-string-stream str)
  (let ((index 0)
        (length (string-length str)))
    (define (is-empty)
      (>= index length))
    (define (back-char (delta 1))
      (if (< delta 0)
          (error "delta cannot be -\\ve: BACK-CHAR" delta)
          (set! index (- index delta))))
    (define (read-char end-val)
      (if (is-empty)
          end-val
          (let ((char (string-ref str index)))
            (set! index (+ index 1))
            char)))
    (define (read-until-aux delim)
      (let ((char (read-char 'done)))
        (cond ((eq? char 'done) 'done)
              ((char=? char delim) 'done)
              (else (read-until-aux delim)))))
    (define (read-until delim)
      (let ((start index))
        (read-until-aux delim)
        (substring str start (- index 1))))
    (define (dispatch m)
      (case m
        ('back-char back-char)
        ('read-char read-char)
        ('read-until read-until)
        ('index index)
        ('is-empty is-empty)
        (else (error "unknown message: STRING-STREAM" m))))
    dispatch))
